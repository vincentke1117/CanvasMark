import { useCallback } from 'react';
import MarkdownIt from 'markdown-it';
import dayjs from 'dayjs';
import { exportThemeStyles } from '../themes/exportStyles';
import { useDocumentStore } from '../documents/documentStore';
import { injectDrawnixBlocks } from '../blocks/drawnixPlaceholders';
import { stripPaginationMarkers } from '../pagination/paginationMarkers';

const markdown = new MarkdownIt({
  html: false,
  linkify: true,
  typographer: true,
});

interface ExportContext {
  title: string;
  author?: string;
  generatedAt: string;
  themeId: string;
  markdown: string;
}

const buildHtmlDocument = (body: string, themeId: string, context: ExportContext) => {
  const themeStyles = exportThemeStyles[themeId] ?? '';
  const meta = `<!-- Generated by CanvasMark at ${context.generatedAt} -->`;

  return `<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${context.title}</title>
    <meta name="author" content="${context.author ?? '未知作者'}" />
    <meta name="generator" content="CanvasMark" />
    <style>${themeStyles}</style>
  </head>
  <body>
    <article>
      <header>
        <h1>${context.title}</h1>
        <p style="color: #6c6f7d; font-size: 0.9rem;">${context.author ?? '匿名作者'} · ${context.generatedAt}</p>
      </header>
      ${body}
    </article>
    ${meta}
  </body>
</html>`;
};

const applyWechatCleanup = (html: string) => {
  return html
    .replace(
      /<article>/g,
      `<div class="canvasmark-article" style="font-size: 16px; line-height: 1.75; color: #1f1f24; font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif;">`,
    )
    .replace(/<\/article>/g, '</div>')
    .replace(/<table>/g, '<table style="border-collapse:collapse;width:100%;margin:24px 0;">')
    .replace(/<th>/g, '<th style="border:1px solid #d6d6de;padding:12px 16px;text-align:left;">')
    .replace(/<td>/g, '<td style="border:1px solid #d6d6de;padding:12px 16px;">')
    .replace(/<img /g, '<img style="max-width:100%;height:auto;border-radius:12px;" ')
    .replace(/<pre><code/g, '<pre style="background:#1f2430;color:#f7f8ff;padding:16px 20px;border-radius:12px;overflow:auto;"><code')
    .replace(/<blockquote>/g, '<blockquote style="border-left:4px solid #4c6ef5;padding-left:16px;margin:24px 0;color:#3a3d4a;background:rgba(76,110,245,0.08);">');
};

export const useExportService = () => {
  const { title, content, themes, blocks } = useDocumentStore((state) => state.document);

  const prepareMarkdown = useCallback(() => {
    const withoutMarkers = stripPaginationMarkers(content);
    return injectDrawnixBlocks(withoutMarkers, blocks);
  }, [content, blocks]);

  const exportStandard = useCallback(() => {
    const context: ExportContext = {
      title,
      markdown: prepareMarkdown(),
      generatedAt: dayjs().format('YYYY-MM-DD HH:mm'),
      themeId: themes.export,
    };

    const body = markdown.render(context.markdown);
    return buildHtmlDocument(body, context.themeId, context);
  }, [title, prepareMarkdown, themes.export]);

  const exportWechat = useCallback(() => {
    const context: ExportContext = {
      title,
      markdown: prepareMarkdown(),
      generatedAt: dayjs().format('YYYY-MM-DD HH:mm'),
      themeId: themes.export,
    };

    const body = markdown.render(context.markdown);
    const html = buildHtmlDocument(body, context.themeId, context);
    return applyWechatCleanup(html);
  }, [title, prepareMarkdown, themes.export]);

  return {
    exportStandard,
    exportWechat,
  };
};
